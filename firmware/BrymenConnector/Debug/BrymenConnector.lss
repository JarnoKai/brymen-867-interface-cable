
BrymenConnector.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000752  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000006c  00800060  00000752  000007e6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  008000cc  008000cc  00000852  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000852  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000884  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000090  00000000  00000000  000008c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012bb  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000994  00000000  00000000  00001c0b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000983  00000000  00000000  0000259f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000148  00000000  00000000  00002f24  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000047b  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000812  00000000  00000000  000034e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003cf9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	8e c0       	rjmp	.+284    	; 0x11e <__ctors_end>
   2:	4e c3       	rjmp	.+1692   	; 0x6a0 <__vector_1>
   4:	a5 c0       	rjmp	.+330    	; 0x150 <__bad_interrupt>
   6:	a4 c0       	rjmp	.+328    	; 0x150 <__bad_interrupt>
   8:	a3 c0       	rjmp	.+326    	; 0x150 <__bad_interrupt>
   a:	a2 c0       	rjmp	.+324    	; 0x150 <__bad_interrupt>
   c:	a1 c0       	rjmp	.+322    	; 0x150 <__bad_interrupt>
   e:	a0 c0       	rjmp	.+320    	; 0x150 <__bad_interrupt>
  10:	9f c0       	rjmp	.+318    	; 0x150 <__bad_interrupt>
  12:	9e c0       	rjmp	.+316    	; 0x150 <__bad_interrupt>
  14:	9d c0       	rjmp	.+314    	; 0x150 <__bad_interrupt>
  16:	9c c0       	rjmp	.+312    	; 0x150 <__bad_interrupt>
  18:	9b c0       	rjmp	.+310    	; 0x150 <__bad_interrupt>
  1a:	9a c0       	rjmp	.+308    	; 0x150 <__bad_interrupt>
  1c:	99 c0       	rjmp	.+306    	; 0x150 <__bad_interrupt>
  1e:	1d c1       	rjmp	.+570    	; 0x25a <_Z11decodeDigith+0x42>
  20:	1e c1       	rjmp	.+572    	; 0x25e <_Z11decodeDigith+0x46>
  22:	1d c1       	rjmp	.+570    	; 0x25e <_Z11decodeDigith+0x46>
  24:	1c c1       	rjmp	.+568    	; 0x25e <_Z11decodeDigith+0x46>
  26:	1b c1       	rjmp	.+566    	; 0x25e <_Z11decodeDigith+0x46>
  28:	1a c1       	rjmp	.+564    	; 0x25e <_Z11decodeDigith+0x46>
  2a:	19 c1       	rjmp	.+562    	; 0x25e <_Z11decodeDigith+0x46>
  2c:	18 c1       	rjmp	.+560    	; 0x25e <_Z11decodeDigith+0x46>
  2e:	17 c1       	rjmp	.+558    	; 0x25e <_Z11decodeDigith+0x46>
  30:	16 c1       	rjmp	.+556    	; 0x25e <_Z11decodeDigith+0x46>
  32:	15 c1       	rjmp	.+554    	; 0x25e <_Z11decodeDigith+0x46>
  34:	10 c1       	rjmp	.+544    	; 0x256 <_Z11decodeDigith+0x3e>
  36:	13 c1       	rjmp	.+550    	; 0x25e <_Z11decodeDigith+0x46>
  38:	12 c1       	rjmp	.+548    	; 0x25e <_Z11decodeDigith+0x46>
  3a:	11 c1       	rjmp	.+546    	; 0x25e <_Z11decodeDigith+0x46>
  3c:	10 c1       	rjmp	.+544    	; 0x25e <_Z11decodeDigith+0x46>
  3e:	07 c1       	rjmp	.+526    	; 0x24e <_Z11decodeDigith+0x36>
  40:	0e c1       	rjmp	.+540    	; 0x25e <_Z11decodeDigith+0x46>
  42:	0d c1       	rjmp	.+538    	; 0x25e <_Z11decodeDigith+0x46>
  44:	0c c1       	rjmp	.+536    	; 0x25e <_Z11decodeDigith+0x46>
  46:	0b c1       	rjmp	.+534    	; 0x25e <_Z11decodeDigith+0x46>
  48:	0a c1       	rjmp	.+532    	; 0x25e <_Z11decodeDigith+0x46>
  4a:	09 c1       	rjmp	.+530    	; 0x25e <_Z11decodeDigith+0x46>
  4c:	08 c1       	rjmp	.+528    	; 0x25e <_Z11decodeDigith+0x46>
  4e:	07 c1       	rjmp	.+526    	; 0x25e <_Z11decodeDigith+0x46>
  50:	06 c1       	rjmp	.+524    	; 0x25e <_Z11decodeDigith+0x46>
  52:	05 c1       	rjmp	.+522    	; 0x25e <_Z11decodeDigith+0x46>
  54:	04 c1       	rjmp	.+520    	; 0x25e <_Z11decodeDigith+0x46>
  56:	03 c1       	rjmp	.+518    	; 0x25e <_Z11decodeDigith+0x46>
  58:	02 c1       	rjmp	.+516    	; 0x25e <_Z11decodeDigith+0x46>
  5a:	01 c1       	rjmp	.+514    	; 0x25e <_Z11decodeDigith+0x46>
  5c:	00 c1       	rjmp	.+512    	; 0x25e <_Z11decodeDigith+0x46>
  5e:	ff c0       	rjmp	.+510    	; 0x25e <_Z11decodeDigith+0x46>
  60:	fe c0       	rjmp	.+508    	; 0x25e <_Z11decodeDigith+0x46>
  62:	fd c0       	rjmp	.+506    	; 0x25e <_Z11decodeDigith+0x46>
  64:	fc c0       	rjmp	.+504    	; 0x25e <_Z11decodeDigith+0x46>
  66:	fb c0       	rjmp	.+502    	; 0x25e <_Z11decodeDigith+0x46>
  68:	fa c0       	rjmp	.+500    	; 0x25e <_Z11decodeDigith+0x46>
  6a:	f9 c0       	rjmp	.+498    	; 0x25e <_Z11decodeDigith+0x46>
  6c:	f8 c0       	rjmp	.+496    	; 0x25e <_Z11decodeDigith+0x46>
  6e:	f7 c0       	rjmp	.+494    	; 0x25e <_Z11decodeDigith+0x46>
  70:	f6 c0       	rjmp	.+492    	; 0x25e <_Z11decodeDigith+0x46>
  72:	f5 c0       	rjmp	.+490    	; 0x25e <_Z11decodeDigith+0x46>
  74:	f4 c0       	rjmp	.+488    	; 0x25e <_Z11decodeDigith+0x46>
  76:	f3 c0       	rjmp	.+486    	; 0x25e <_Z11decodeDigith+0x46>
  78:	f2 c0       	rjmp	.+484    	; 0x25e <_Z11decodeDigith+0x46>
  7a:	f1 c0       	rjmp	.+482    	; 0x25e <_Z11decodeDigith+0x46>
  7c:	f0 c0       	rjmp	.+480    	; 0x25e <_Z11decodeDigith+0x46>
  7e:	ef c0       	rjmp	.+478    	; 0x25e <_Z11decodeDigith+0x46>
  80:	ee c0       	rjmp	.+476    	; 0x25e <_Z11decodeDigith+0x46>
  82:	ed c0       	rjmp	.+474    	; 0x25e <_Z11decodeDigith+0x46>
  84:	ec c0       	rjmp	.+472    	; 0x25e <_Z11decodeDigith+0x46>
  86:	eb c0       	rjmp	.+470    	; 0x25e <_Z11decodeDigith+0x46>
  88:	ea c0       	rjmp	.+468    	; 0x25e <_Z11decodeDigith+0x46>
  8a:	e9 c0       	rjmp	.+466    	; 0x25e <_Z11decodeDigith+0x46>
  8c:	e8 c0       	rjmp	.+464    	; 0x25e <_Z11decodeDigith+0x46>
  8e:	e7 c0       	rjmp	.+462    	; 0x25e <_Z11decodeDigith+0x46>
  90:	e0 c0       	rjmp	.+448    	; 0x252 <_Z11decodeDigith+0x3a>
  92:	e5 c0       	rjmp	.+458    	; 0x25e <_Z11decodeDigith+0x46>
  94:	e4 c0       	rjmp	.+456    	; 0x25e <_Z11decodeDigith+0x46>
  96:	e3 c0       	rjmp	.+454    	; 0x25e <_Z11decodeDigith+0x46>
  98:	e2 c0       	rjmp	.+452    	; 0x25e <_Z11decodeDigith+0x46>
  9a:	cd c0       	rjmp	.+410    	; 0x236 <_Z11decodeDigith+0x1e>
  9c:	ce c0       	rjmp	.+412    	; 0x23a <_Z11decodeDigith+0x22>
  9e:	df c0       	rjmp	.+446    	; 0x25e <_Z11decodeDigith+0x46>
  a0:	de c0       	rjmp	.+444    	; 0x25e <_Z11decodeDigith+0x46>
  a2:	dd c0       	rjmp	.+442    	; 0x25e <_Z11decodeDigith+0x46>
  a4:	dc c0       	rjmp	.+440    	; 0x25e <_Z11decodeDigith+0x46>
  a6:	db c0       	rjmp	.+438    	; 0x25e <_Z11decodeDigith+0x46>
  a8:	da c0       	rjmp	.+436    	; 0x25e <_Z11decodeDigith+0x46>
  aa:	d9 c0       	rjmp	.+434    	; 0x25e <_Z11decodeDigith+0x46>
  ac:	d8 c0       	rjmp	.+432    	; 0x25e <_Z11decodeDigith+0x46>
  ae:	d7 c0       	rjmp	.+430    	; 0x25e <_Z11decodeDigith+0x46>
  b0:	d6 c0       	rjmp	.+428    	; 0x25e <_Z11decodeDigith+0x46>
  b2:	d5 c0       	rjmp	.+426    	; 0x25e <_Z11decodeDigith+0x46>
  b4:	d4 c0       	rjmp	.+424    	; 0x25e <_Z11decodeDigith+0x46>
  b6:	d3 c0       	rjmp	.+422    	; 0x25e <_Z11decodeDigith+0x46>
  b8:	d2 c0       	rjmp	.+420    	; 0x25e <_Z11decodeDigith+0x46>
  ba:	d1 c0       	rjmp	.+418    	; 0x25e <_Z11decodeDigith+0x46>
  bc:	d0 c0       	rjmp	.+416    	; 0x25e <_Z11decodeDigith+0x46>
  be:	b3 c0       	rjmp	.+358    	; 0x226 <_Z11decodeDigith+0xe>
  c0:	ce c0       	rjmp	.+412    	; 0x25e <_Z11decodeDigith+0x46>
  c2:	cd c0       	rjmp	.+410    	; 0x25e <_Z11decodeDigith+0x46>
  c4:	cc c0       	rjmp	.+408    	; 0x25e <_Z11decodeDigith+0x46>
  c6:	bb c0       	rjmp	.+374    	; 0x23e <_Z11decodeDigith+0x26>
  c8:	ca c0       	rjmp	.+404    	; 0x25e <_Z11decodeDigith+0x46>
  ca:	c9 c0       	rjmp	.+402    	; 0x25e <_Z11decodeDigith+0x46>
  cc:	c8 c0       	rjmp	.+400    	; 0x25e <_Z11decodeDigith+0x46>
  ce:	c7 c0       	rjmp	.+398    	; 0x25e <_Z11decodeDigith+0x46>
  d0:	c6 c0       	rjmp	.+396    	; 0x25e <_Z11decodeDigith+0x46>
  d2:	c5 c0       	rjmp	.+394    	; 0x25e <_Z11decodeDigith+0x46>
  d4:	c4 c0       	rjmp	.+392    	; 0x25e <_Z11decodeDigith+0x46>
  d6:	c3 c0       	rjmp	.+390    	; 0x25e <_Z11decodeDigith+0x46>
  d8:	c2 c0       	rjmp	.+388    	; 0x25e <_Z11decodeDigith+0x46>
  da:	c1 c0       	rjmp	.+386    	; 0x25e <_Z11decodeDigith+0x46>
  dc:	c2 c0       	rjmp	.+388    	; 0x262 <_Z11decodeDigith+0x4a>
  de:	bf c0       	rjmp	.+382    	; 0x25e <_Z11decodeDigith+0x46>
  e0:	be c0       	rjmp	.+380    	; 0x25e <_Z11decodeDigith+0x46>
  e2:	bd c0       	rjmp	.+378    	; 0x25e <_Z11decodeDigith+0x46>
  e4:	bc c0       	rjmp	.+376    	; 0x25e <_Z11decodeDigith+0x46>
  e6:	bb c0       	rjmp	.+374    	; 0x25e <_Z11decodeDigith+0x46>
  e8:	ba c0       	rjmp	.+372    	; 0x25e <_Z11decodeDigith+0x46>
  ea:	b9 c0       	rjmp	.+370    	; 0x25e <_Z11decodeDigith+0x46>
  ec:	b8 c0       	rjmp	.+368    	; 0x25e <_Z11decodeDigith+0x46>
  ee:	b7 c0       	rjmp	.+366    	; 0x25e <_Z11decodeDigith+0x46>
  f0:	b6 c0       	rjmp	.+364    	; 0x25e <_Z11decodeDigith+0x46>
  f2:	b5 c0       	rjmp	.+362    	; 0x25e <_Z11decodeDigith+0x46>
  f4:	b4 c0       	rjmp	.+360    	; 0x25e <_Z11decodeDigith+0x46>
  f6:	b3 c0       	rjmp	.+358    	; 0x25e <_Z11decodeDigith+0x46>
  f8:	98 c0       	rjmp	.+304    	; 0x22a <_Z11decodeDigith+0x12>
  fa:	b1 c0       	rjmp	.+354    	; 0x25e <_Z11decodeDigith+0x46>
  fc:	b0 c0       	rjmp	.+352    	; 0x25e <_Z11decodeDigith+0x46>
  fe:	af c0       	rjmp	.+350    	; 0x25e <_Z11decodeDigith+0x46>
 100:	ae c0       	rjmp	.+348    	; 0x25e <_Z11decodeDigith+0x46>
 102:	97 c0       	rjmp	.+302    	; 0x232 <_Z11decodeDigith+0x1a>
 104:	ac c0       	rjmp	.+344    	; 0x25e <_Z11decodeDigith+0x46>
 106:	ab c0       	rjmp	.+342    	; 0x25e <_Z11decodeDigith+0x46>
 108:	aa c0       	rjmp	.+340    	; 0x25e <_Z11decodeDigith+0x46>
 10a:	a9 c0       	rjmp	.+338    	; 0x25e <_Z11decodeDigith+0x46>
 10c:	a8 c0       	rjmp	.+336    	; 0x25e <_Z11decodeDigith+0x46>
 10e:	a7 c0       	rjmp	.+334    	; 0x25e <_Z11decodeDigith+0x46>
 110:	9c c0       	rjmp	.+312    	; 0x24a <_Z11decodeDigith+0x32>
 112:	a5 c0       	rjmp	.+330    	; 0x25e <_Z11decodeDigith+0x46>
 114:	a4 c0       	rjmp	.+328    	; 0x25e <_Z11decodeDigith+0x46>
 116:	8b c0       	rjmp	.+278    	; 0x22e <_Z11decodeDigith+0x16>
 118:	a2 c0       	rjmp	.+324    	; 0x25e <_Z11decodeDigith+0x46>
 11a:	95 c0       	rjmp	.+298    	; 0x246 <_Z11decodeDigith+0x2e>
 11c:	92 c0       	rjmp	.+292    	; 0x242 <_Z11decodeDigith+0x2a>

0000011e <__ctors_end>:
 11e:	11 24       	eor	r1, r1
 120:	1f be       	out	0x3f, r1	; 63
 122:	cf ed       	ldi	r28, 0xDF	; 223
 124:	cd bf       	out	0x3d, r28	; 61

00000126 <__do_copy_data>:
 126:	10 e0       	ldi	r17, 0x00	; 0
 128:	a0 e6       	ldi	r26, 0x60	; 96
 12a:	b0 e0       	ldi	r27, 0x00	; 0
 12c:	e2 e5       	ldi	r30, 0x52	; 82
 12e:	f7 e0       	ldi	r31, 0x07	; 7
 130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x10>
 132:	05 90       	lpm	r0, Z+
 134:	0d 92       	st	X+, r0
 136:	ac 3c       	cpi	r26, 0xCC	; 204
 138:	b1 07       	cpc	r27, r17
 13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0xc>

0000013c <__do_clear_bss>:
 13c:	20 e0       	ldi	r18, 0x00	; 0
 13e:	ac ec       	ldi	r26, 0xCC	; 204
 140:	b0 e0       	ldi	r27, 0x00	; 0
 142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
 144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
 146:	ad 3d       	cpi	r26, 0xDD	; 221
 148:	b2 07       	cpc	r27, r18
 14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>
 14c:	2c d2       	rcall	.+1112   	; 0x5a6 <main>
 14e:	ff c2       	rjmp	.+1534   	; 0x74e <_exit>

00000150 <__bad_interrupt>:
 150:	57 cf       	rjmp	.-338    	; 0x0 <__vectors>

00000152 <_Z7irPulsev>:
extern softUART uart;

extern uint8_t data[16];

uint8_t irPulse(void)
{
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t temp = 0;
 156:	80 e0       	ldi	r24, 0x00	; 0
	{
		IRLED_LOW;
		_delay_us(CLOCK_DELAY);
		
		if (!IRTRAN_LOW)
		temp |= (1 << i);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	70 e0       	ldi	r23, 0x00	; 0
{
	uint8_t temp = 0;

	for (uint8_t i = 0; i < 8; i ++)
	{
		IRLED_LOW;
 15c:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15e:	eb e2       	ldi	r30, 0x2B	; 43
 160:	f1 e0       	ldi	r31, 0x01	; 1
 162:	31 97       	sbiw	r30, 0x01	; 1
 164:	f1 f7       	brne	.-4      	; 0x162 <_Z7irPulsev+0x10>
 166:	00 c0       	rjmp	.+0      	; 0x168 <_Z7irPulsev+0x16>
 168:	00 00       	nop
		_delay_us(CLOCK_DELAY);
		
		if (!IRTRAN_LOW)
 16a:	b3 9b       	sbis	0x16, 3	; 22
 16c:	08 c0       	rjmp	.+16     	; 0x17e <_Z7irPulsev+0x2c>
		temp |= (1 << i);
 16e:	ab 01       	movw	r20, r22
 170:	02 2e       	mov	r0, r18
 172:	02 c0       	rjmp	.+4      	; 0x178 <_Z7irPulsev+0x26>
 174:	44 0f       	add	r20, r20
 176:	55 1f       	adc	r21, r21
 178:	0a 94       	dec	r0
 17a:	e2 f7       	brpl	.-8      	; 0x174 <_Z7irPulsev+0x22>
 17c:	84 2b       	or	r24, r20

		IRLED_HIGH;
 17e:	c4 9a       	sbi	0x18, 4	; 24
 180:	eb e2       	ldi	r30, 0x2B	; 43
 182:	f1 e0       	ldi	r31, 0x01	; 1
 184:	31 97       	sbiw	r30, 0x01	; 1
 186:	f1 f7       	brne	.-4      	; 0x184 <_Z7irPulsev+0x32>
 188:	00 c0       	rjmp	.+0      	; 0x18a <_Z7irPulsev+0x38>
 18a:	00 00       	nop
 18c:	2f 5f       	subi	r18, 0xFF	; 255
 18e:	3f 4f       	sbci	r19, 0xFF	; 255

uint8_t irPulse(void)
{
	uint8_t temp = 0;

	for (uint8_t i = 0; i < 8; i ++)
 190:	28 30       	cpi	r18, 0x08	; 8
 192:	31 05       	cpc	r19, r1
 194:	19 f7       	brne	.-58     	; 0x15c <_Z7irPulsev+0xa>
		IRLED_HIGH;
		_delay_us(CLOCK_DELAY);
	}

	return temp;
}
 196:	08 95       	ret

00000198 <_Z7getDatav>:

int8_t getData(void)
{
 198:	0f 93       	push	r16
 19a:	1f 93       	push	r17
 19c:	cf 93       	push	r28
 19e:	df 93       	push	r29
	//10 ms pulse to init it
	IRLED_LOW;
 1a0:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a2:	8f e1       	ldi	r24, 0x1F	; 31
 1a4:	9e e4       	ldi	r25, 0x4E	; 78
 1a6:	01 97       	sbiw	r24, 0x01	; 1
 1a8:	f1 f7       	brne	.-4      	; 0x1a6 <_Z7getDatav+0xe>
 1aa:	00 c0       	rjmp	.+0      	; 0x1ac <_Z7getDatav+0x14>
 1ac:	00 00       	nop
	_delay_ms(10);
	IRLED_HIGH;
 1ae:	c4 9a       	sbi	0x18, 4	; 24
 1b0:	8e ef       	ldi	r24, 0xFE	; 254
 1b2:	9f ef       	ldi	r25, 0xFF	; 255
 1b4:	a1 e0       	ldi	r26, 0x01	; 1
 1b6:	b0 e0       	ldi	r27, 0x00	; 0
 1b8:	04 c0       	rjmp	.+8      	; 0x1c2 <_Z7getDatav+0x2a>
 1ba:	01 97       	sbiw	r24, 0x01	; 1
 1bc:	a1 09       	sbc	r26, r1
 1be:	b1 09       	sbc	r27, r1
	int8_t status = 0;
	uint32_t i = 0;
	while (status == 0)
	{
		i++;
		if (i == 0x1FFFF)	//we have an overflow (about 100 ms)
 1c0:	89 f0       	breq	.+34     	; 0x1e4 <_Z7getDatav+0x4c>
		status = -1;

		if (IRTRAN_LOW)		//the pin is low
 1c2:	b3 9b       	sbis	0x16, 3	; 22
 1c4:	11 c0       	rjmp	.+34     	; 0x1e8 <_Z7getDatav+0x50>
 1c6:	f9 cf       	rjmp	.-14     	; 0x1ba <_Z7getDatav+0x22>
		_delay_us(CLOCK_DELAY);
		IRLED_HIGH;
		_delay_us(CLOCK_DELAY);
		
		for (uint8_t j = 0; j < 16; j ++)		//we really care only about the first 16 bytes of data
			data[j] = irPulse();
 1c8:	c4 df       	rcall	.-120    	; 0x152 <_Z7irPulsev>
 1ca:	89 93       	st	Y+, r24
		IRLED_LOW;					//a blank pulse, to init the transfer
		_delay_us(CLOCK_DELAY);
		IRLED_HIGH;
		_delay_us(CLOCK_DELAY);
		
		for (uint8_t j = 0; j < 16; j ++)		//we really care only about the first 16 bytes of data
 1cc:	c0 17       	cp	r28, r16
 1ce:	d1 07       	cpc	r29, r17
 1d0:	d9 f7       	brne	.-10     	; 0x1c8 <_Z7getDatav+0x30>
			data[j] = irPulse();

		for (uint8_t j = 0; j < 5; j ++)		//so lets discard the rest. And also do an extra clock cycle, to avoid errors
			irPulse();
 1d2:	bf df       	rcall	.-130    	; 0x152 <_Z7irPulsev>
 1d4:	be df       	rcall	.-132    	; 0x152 <_Z7irPulsev>
 1d6:	bd df       	rcall	.-134    	; 0x152 <_Z7irPulsev>
 1d8:	bc df       	rcall	.-136    	; 0x152 <_Z7irPulsev>
 1da:	bb df       	rcall	.-138    	; 0x152 <_Z7irPulsev>
 1dc:	81 e0       	ldi	r24, 0x01	; 1
 1de:	17 c0       	rjmp	.+46     	; 0x20e <_Z7getDatav+0x76>
	uint32_t i = 0;
	while (status == 0)
	{
		i++;
		if (i == 0x1FFFF)	//we have an overflow (about 100 ms)
		status = -1;
 1e0:	8f ef       	ldi	r24, 0xFF	; 255
 1e2:	15 c0       	rjmp	.+42     	; 0x20e <_Z7getDatav+0x76>

		if (IRTRAN_LOW)		//the pin is low
 1e4:	b3 99       	sbic	0x16, 3	; 22
 1e6:	fc cf       	rjmp	.-8      	; 0x1e0 <_Z7getDatav+0x48>
		status = 1;
	}

	if (status == 1)	//we had a contact, start clocking
	{
		IRLED_LOW;					//a blank pulse, to init the transfer
 1e8:	c4 98       	cbi	0x18, 4	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ea:	8b e2       	ldi	r24, 0x2B	; 43
 1ec:	91 e0       	ldi	r25, 0x01	; 1
 1ee:	01 97       	sbiw	r24, 0x01	; 1
 1f0:	f1 f7       	brne	.-4      	; 0x1ee <_Z7getDatav+0x56>
 1f2:	00 c0       	rjmp	.+0      	; 0x1f4 <_Z7getDatav+0x5c>
 1f4:	00 00       	nop
		_delay_us(CLOCK_DELAY);
		IRLED_HIGH;
 1f6:	c4 9a       	sbi	0x18, 4	; 24
 1f8:	8b e2       	ldi	r24, 0x2B	; 43
 1fa:	91 e0       	ldi	r25, 0x01	; 1
 1fc:	01 97       	sbiw	r24, 0x01	; 1
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <_Z7getDatav+0x64>
 200:	00 c0       	rjmp	.+0      	; 0x202 <_Z7getDatav+0x6a>
 202:	00 00       	nop
 204:	cc ec       	ldi	r28, 0xCC	; 204
 206:	d0 e0       	ldi	r29, 0x00	; 0
 208:	0c ed       	ldi	r16, 0xDC	; 220
 20a:	10 e0       	ldi	r17, 0x00	; 0
 20c:	dd cf       	rjmp	.-70     	; 0x1c8 <_Z7getDatav+0x30>
		for (uint8_t j = 0; j < 5; j ++)		//so lets discard the rest. And also do an extra clock cycle, to avoid errors
			irPulse();
	}

	return status;
}
 20e:	df 91       	pop	r29
 210:	cf 91       	pop	r28
 212:	1f 91       	pop	r17
 214:	0f 91       	pop	r16
 216:	08 95       	ret

00000218 <_Z11decodeDigith>:

int8_t decodeDigit(uint8_t source)
{
	int8_t result = 0;

	switch (source >> 1)
 218:	e8 2f       	mov	r30, r24
 21a:	f0 e0       	ldi	r31, 0x00	; 0
 21c:	f5 95       	asr	r31
 21e:	e7 95       	ror	r30
 220:	e1 5f       	subi	r30, 0xF1	; 241
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	09 94       	ijmp
	{
		case 0b1011111: result = 0; break;
		case 0b1010000: result = 1; break;
 226:	81 e0       	ldi	r24, 0x01	; 1
 228:	08 95       	ret
		case 0b1101101: result = 2; break;
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	08 95       	ret
		case 0b1111100: result = 3; break;
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	08 95       	ret
		case 0b1110010: result = 4; break;
 232:	84 e0       	ldi	r24, 0x04	; 4
 234:	08 95       	ret
		case 0b0111110: result = 5; break;
 236:	85 e0       	ldi	r24, 0x05	; 5
 238:	08 95       	ret
		case 0b0111111: result = 6; break;
 23a:	86 e0       	ldi	r24, 0x06	; 6
 23c:	08 95       	ret
		case 0b1010100: result = 7; break;
 23e:	87 e0       	ldi	r24, 0x07	; 7
 240:	08 95       	ret
		case 0b1111111: result = 8; break;
 242:	88 e0       	ldi	r24, 0x08	; 8
 244:	08 95       	ret
		case 0b1111110: result = 9; break;
 246:	89 e0       	ldi	r24, 0x09	; 9
 248:	08 95       	ret
		case 0b1111001: result = ('d' - 48); break;
 24a:	84 e3       	ldi	r24, 0x34	; 52
 24c:	08 95       	ret
		case 0b0010000: result = ('i' - 48); break;
 24e:	89 e3       	ldi	r24, 0x39	; 57
 250:	08 95       	ret
		case 0b0111001: result = ('o' - 48); break;
 252:	8f e3       	ldi	r24, 0x3F	; 63
 254:	08 95       	ret
		case 0b0001011: result = ('L' - 48); break;
 256:	8c e1       	ldi	r24, 0x1C	; 28
 258:	08 95       	ret
		case 0b0000000: result = (' ' - 48); break;
 25a:	80 ef       	ldi	r24, 0xF0	; 240
 25c:	08 95       	ret
		default: result = ('?' - 48); break;
 25e:	8f e0       	ldi	r24, 0x0F	; 15
 260:	08 95       	ret
{
	int8_t result = 0;

	switch (source >> 1)
	{
		case 0b1011111: result = 0; break;
 262:	80 e0       	ldi	r24, 0x00	; 0
		case 0b0000000: result = (' ' - 48); break;
		default: result = ('?' - 48); break;
	}

	return result;
}
 264:	08 95       	ret

00000266 <_Z11processDatav>:

void processData(void)
{
 266:	ff 92       	push	r15
 268:	0f 93       	push	r16
 26a:	1f 93       	push	r17
 26c:	cf 93       	push	r28
 26e:	df 93       	push	r29
	//DECODE ATTRIBUTES
	if (data[0] & 0x01)
 270:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 274:	80 ff       	sbrs	r24, 0
 276:	05 c0       	rjmp	.+10     	; 0x282 <_Z11processDatav+0x1c>
		uart.sendString((char*)"AUTO ");
 278:	61 e6       	ldi	r22, 0x61	; 97
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	8c ed       	ldi	r24, 0xDC	; 220
 27e:	90 e0       	ldi	r25, 0x00	; 0
 280:	fb d1       	rcall	.+1014   	; 0x678 <_ZN8softUART10sendStringEPc>
	if ((data[0] >> 7) & 0x01)
 282:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 286:	88 23       	and	r24, r24
 288:	2c f4       	brge	.+10     	; 0x294 <_Z11processDatav+0x2e>
		uart.sendString((char*)"AVG ");
 28a:	67 e6       	ldi	r22, 0x67	; 103
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	8c ed       	ldi	r24, 0xDC	; 220
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	f2 d1       	rcall	.+996    	; 0x678 <_ZN8softUART10sendStringEPc>
	if ((data[0] >> 6) & 0x01)
 294:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 298:	86 ff       	sbrs	r24, 6
 29a:	05 c0       	rjmp	.+10     	; 0x2a6 <_Z11processDatav+0x40>
		uart.sendString((char*)"MIN ");
 29c:	6c e6       	ldi	r22, 0x6C	; 108
 29e:	70 e0       	ldi	r23, 0x00	; 0
 2a0:	8c ed       	ldi	r24, 0xDC	; 220
 2a2:	90 e0       	ldi	r25, 0x00	; 0
 2a4:	e9 d1       	rcall	.+978    	; 0x678 <_ZN8softUART10sendStringEPc>
	if ((data[0] >> 5) & 0x01)
 2a6:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 2aa:	85 ff       	sbrs	r24, 5
 2ac:	05 c0       	rjmp	.+10     	; 0x2b8 <_Z11processDatav+0x52>
		uart.sendString((char*)"MAX ");
 2ae:	61 e7       	ldi	r22, 0x71	; 113
 2b0:	70 e0       	ldi	r23, 0x00	; 0
 2b2:	8c ed       	ldi	r24, 0xDC	; 220
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	e0 d1       	rcall	.+960    	; 0x678 <_ZN8softUART10sendStringEPc>
	if ((data[0] >> 2) & 0x01)
 2b8:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 2bc:	82 ff       	sbrs	r24, 2
 2be:	05 c0       	rjmp	.+10     	; 0x2ca <_Z11processDatav+0x64>
		uart.sendString((char*)"CREST ");
 2c0:	66 e7       	ldi	r22, 0x76	; 118
 2c2:	70 e0       	ldi	r23, 0x00	; 0
 2c4:	8c ed       	ldi	r24, 0xDC	; 220
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	d7 d1       	rcall	.+942    	; 0x678 <_ZN8softUART10sendStringEPc>
	if ((data[0] >> 1) & 0x01)
 2ca:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 2ce:	81 ff       	sbrs	r24, 1
 2d0:	05 c0       	rjmp	.+10     	; 0x2dc <_Z11processDatav+0x76>
		uart.sendString((char*)"REC ");
 2d2:	6d e7       	ldi	r22, 0x7D	; 125
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	8c ed       	ldi	r24, 0xDC	; 220
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	ce d1       	rcall	.+924    	; 0x678 <_ZN8softUART10sendStringEPc>
	if ((data[0] >> 3) & 0x01)
 2dc:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 2e0:	83 ff       	sbrs	r24, 3
 2e2:	05 c0       	rjmp	.+10     	; 0x2ee <_Z11processDatav+0x88>
		uart.sendString((char*)"HOLD ");
 2e4:	62 e8       	ldi	r22, 0x82	; 130
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	8c ed       	ldi	r24, 0xDC	; 220
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	c5 d1       	rcall	.+906    	; 0x678 <_ZN8softUART10sendStringEPc>
	if (data[2] & 0x01)
 2ee:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__data_end+0x2>
 2f2:	80 ff       	sbrs	r24, 0
 2f4:	05 c0       	rjmp	.+10     	; 0x300 <_Z11processDatav+0x9a>
		uart.sendString((char*)"DELTA ");
 2f6:	68 e8       	ldi	r22, 0x88	; 136
 2f8:	70 e0       	ldi	r23, 0x00	; 0
 2fa:	8c ed       	ldi	r24, 0xDC	; 220
 2fc:	90 e0       	ldi	r25, 0x00	; 0
 2fe:	bc d1       	rcall	.+888    	; 0x678 <_ZN8softUART10sendStringEPc>
	if (data[9] & 0x01)
 300:	80 91 d5 00 	lds	r24, 0x00D5	; 0x8000d5 <__data_end+0x9>
 304:	80 ff       	sbrs	r24, 0
 306:	05 c0       	rjmp	.+10     	; 0x312 <_Z11processDatav+0xac>
		uart.sendString((char*)"BEEP ");
 308:	6f e8       	ldi	r22, 0x8F	; 143
 30a:	70 e0       	ldi	r23, 0x00	; 0
 30c:	8c ed       	ldi	r24, 0xDC	; 220
 30e:	90 e0       	ldi	r25, 0x00	; 0
 310:	b3 d1       	rcall	.+870    	; 0x678 <_ZN8softUART10sendStringEPc>

	//DECODE MAIN DISPLAY
	uart.sendString((char*)"MAIN: ");
 312:	65 e9       	ldi	r22, 0x95	; 149
 314:	70 e0       	ldi	r23, 0x00	; 0
 316:	8c ed       	ldi	r24, 0xDC	; 220
 318:	90 e0       	ldi	r25, 0x00	; 0
 31a:	ae d1       	rcall	.+860    	; 0x678 <_ZN8softUART10sendStringEPc>

	if ((data[1] >> 7) & 0x01)
 31c:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <__data_end+0x1>
 320:	88 23       	and	r24, r24
 322:	0c f0       	brlt	.+2      	; 0x326 <_Z11processDatav+0xc0>
 324:	2e c1       	rjmp	.+604    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>
	uart.sendChar('-');
 326:	6d e2       	ldi	r22, 0x2D	; 45
 328:	8c ed       	ldi	r24, 0xDC	; 220
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	7c d1       	rcall	.+760    	; 0x626 <_ZN8softUART8sendCharEh>
 32e:	29 c1       	rjmp	.+594    	; 0x582 <__LOCK_REGION_LENGTH__+0x182>


	for (uint8_t i = 0; i < 6; i++)
	{
		uart.sendChar(48 + decodeDigit(data[2 + i]));
 330:	f8 01       	movw	r30, r16
 332:	81 91       	ld	r24, Z+
 334:	8f 01       	movw	r16, r30
 336:	70 df       	rcall	.-288    	; 0x218 <_Z11decodeDigith>
 338:	60 e3       	ldi	r22, 0x30	; 48
 33a:	68 0f       	add	r22, r24
 33c:	8c ed       	ldi	r24, 0xDC	; 220
 33e:	90 e0       	ldi	r25, 0x00	; 0
 340:	72 d1       	rcall	.+740    	; 0x626 <_ZN8softUART8sendCharEh>
		if ((data[3 + i] & 0x01) & (i < 4))
 342:	f8 01       	movw	r30, r16
 344:	80 81       	ld	r24, Z
 346:	80 ff       	sbrs	r24, 0
 348:	0a c0       	rjmp	.+20     	; 0x35e <_Z11processDatav+0xf8>
 34a:	8d 2f       	mov	r24, r29
 34c:	c4 30       	cpi	r28, 0x04	; 4
 34e:	08 f0       	brcs	.+2      	; 0x352 <_Z11processDatav+0xec>
 350:	8f 2d       	mov	r24, r15
 352:	88 23       	and	r24, r24
 354:	21 f0       	breq	.+8      	; 0x35e <_Z11processDatav+0xf8>
			uart.sendChar('.');
 356:	6e e2       	ldi	r22, 0x2E	; 46
 358:	8c ed       	ldi	r24, 0xDC	; 220
 35a:	90 e0       	ldi	r25, 0x00	; 0
 35c:	64 d1       	rcall	.+712    	; 0x626 <_ZN8softUART8sendCharEh>

	if ((data[1] >> 7) & 0x01)
	uart.sendChar('-');


	for (uint8_t i = 0; i < 6; i++)
 35e:	cf 5f       	subi	r28, 0xFF	; 255
 360:	c6 30       	cpi	r28, 0x06	; 6
 362:	31 f7       	brne	.-52     	; 0x330 <_Z11processDatav+0xca>
	{
		uart.sendChar(48 + decodeDigit(data[2 + i]));
		if ((data[3 + i] & 0x01) & (i < 4))
			uart.sendChar('.');
	}
	uart.sendChar(' ');
 364:	60 e2       	ldi	r22, 0x20	; 32
 366:	8c ed       	ldi	r24, 0xDC	; 220
 368:	90 e0       	ldi	r25, 0x00	; 0
 36a:	5d d1       	rcall	.+698    	; 0x626 <_ZN8softUART8sendCharEh>
	
	//DECODE UNIT PREFIX FOR MAIN DISPLAY
	if ((data[13] >> 6) & 0x01)
 36c:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__data_end+0xd>
 370:	86 ff       	sbrs	r24, 6
 372:	04 c0       	rjmp	.+8      	; 0x37c <_Z11processDatav+0x116>
		uart.sendChar('n');
 374:	6e e6       	ldi	r22, 0x6E	; 110
 376:	8c ed       	ldi	r24, 0xDC	; 220
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	55 d1       	rcall	.+682    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[14] >> 3) & 0x01)
 37c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end+0xe>
 380:	83 ff       	sbrs	r24, 3
 382:	04 c0       	rjmp	.+8      	; 0x38c <_Z11processDatav+0x126>
		uart.sendChar('u');
 384:	65 e7       	ldi	r22, 0x75	; 117
 386:	8c ed       	ldi	r24, 0xDC	; 220
 388:	90 e0       	ldi	r25, 0x00	; 0
 38a:	4d d1       	rcall	.+666    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[14] >> 2) & 0x01)
 38c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end+0xe>
 390:	82 ff       	sbrs	r24, 2
 392:	04 c0       	rjmp	.+8      	; 0x39c <_Z11processDatav+0x136>
		uart.sendChar('m');
 394:	6d e6       	ldi	r22, 0x6D	; 109
 396:	8c ed       	ldi	r24, 0xDC	; 220
 398:	90 e0       	ldi	r25, 0x00	; 0
 39a:	45 d1       	rcall	.+650    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[14] >> 6) & 0x01)
 39c:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end+0xe>
 3a0:	86 ff       	sbrs	r24, 6
 3a2:	04 c0       	rjmp	.+8      	; 0x3ac <_Z11processDatav+0x146>
		uart.sendChar('k');
 3a4:	6b e6       	ldi	r22, 0x6B	; 107
 3a6:	8c ed       	ldi	r24, 0xDC	; 220
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	3d d1       	rcall	.+634    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[14] >> 5) & 0x01)
 3ac:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end+0xe>
 3b0:	85 ff       	sbrs	r24, 5
 3b2:	04 c0       	rjmp	.+8      	; 0x3bc <_Z11processDatav+0x156>
		uart.sendChar('M');
 3b4:	6d e4       	ldi	r22, 0x4D	; 77
 3b6:	8c ed       	ldi	r24, 0xDC	; 220
 3b8:	90 e0       	ldi	r25, 0x00	; 0
 3ba:	35 d1       	rcall	.+618    	; 0x626 <_ZN8softUART8sendCharEh>
	
	//DECODE UNIT FOR MAIN DISPLAY
	if (data[7] & 0x01)
 3bc:	80 91 d3 00 	lds	r24, 0x00D3	; 0x8000d3 <__data_end+0x7>
 3c0:	80 ff       	sbrs	r24, 0
 3c2:	04 c0       	rjmp	.+8      	; 0x3cc <_Z11processDatav+0x166>
		uart.sendChar('V');
 3c4:	66 e5       	ldi	r22, 0x56	; 86
 3c6:	8c ed       	ldi	r24, 0xDC	; 220
 3c8:	90 e0       	ldi	r25, 0x00	; 0
 3ca:	2d d1       	rcall	.+602    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[13] >> 7) & 0x01)
 3cc:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__data_end+0xd>
 3d0:	88 23       	and	r24, r24
 3d2:	24 f4       	brge	.+8      	; 0x3dc <_Z11processDatav+0x176>
		uart.sendChar('A');
 3d4:	61 e4       	ldi	r22, 0x41	; 65
 3d6:	8c ed       	ldi	r24, 0xDC	; 220
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	25 d1       	rcall	.+586    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[13] >> 5) & 0x01)
 3dc:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__data_end+0xd>
 3e0:	85 ff       	sbrs	r24, 5
 3e2:	04 c0       	rjmp	.+8      	; 0x3ec <_Z11processDatav+0x186>
		uart.sendChar('F');
 3e4:	66 e4       	ldi	r22, 0x46	; 70
 3e6:	8c ed       	ldi	r24, 0xDC	; 220
 3e8:	90 e0       	ldi	r25, 0x00	; 0
 3ea:	1d d1       	rcall	.+570    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[13] >> 4) & 0x01)
 3ec:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__data_end+0xd>
 3f0:	84 ff       	sbrs	r24, 4
 3f2:	04 c0       	rjmp	.+8      	; 0x3fc <_Z11processDatav+0x196>
		uart.sendChar('S');
 3f4:	63 e5       	ldi	r22, 0x53	; 83
 3f6:	8c ed       	ldi	r24, 0xDC	; 220
 3f8:	90 e0       	ldi	r25, 0x00	; 0
 3fa:	15 d1       	rcall	.+554    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[14] >> 7) & 0x01)
 3fc:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end+0xe>
 400:	88 23       	and	r24, r24
 402:	2c f4       	brge	.+10     	; 0x40e <__LOCK_REGION_LENGTH__+0xe>
		uart.sendString((char*)"D%");
 404:	6c e9       	ldi	r22, 0x9C	; 156
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	8c ed       	ldi	r24, 0xDC	; 220
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	35 d1       	rcall	.+618    	; 0x678 <_ZN8softUART10sendStringEPc>
	if ((data[14] >> 4) & 0x01)
 40e:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end+0xe>
 412:	84 ff       	sbrs	r24, 4
 414:	05 c0       	rjmp	.+10     	; 0x420 <__LOCK_REGION_LENGTH__+0x20>
		uart.sendString((char*)"Ohm");
 416:	6f e9       	ldi	r22, 0x9F	; 159
 418:	70 e0       	ldi	r23, 0x00	; 0
 41a:	8c ed       	ldi	r24, 0xDC	; 220
 41c:	90 e0       	ldi	r25, 0x00	; 0
 41e:	2c d1       	rcall	.+600    	; 0x678 <_ZN8softUART10sendStringEPc>
	if ((data[14] >> 1) & 0x01)
 420:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end+0xe>
 424:	81 ff       	sbrs	r24, 1
 426:	05 c0       	rjmp	.+10     	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
		uart.sendString((char*)"dB");
 428:	63 ea       	ldi	r22, 0xA3	; 163
 42a:	70 e0       	ldi	r23, 0x00	; 0
 42c:	8c ed       	ldi	r24, 0xDC	; 220
 42e:	90 e0       	ldi	r25, 0x00	; 0
 430:	23 d1       	rcall	.+582    	; 0x678 <_ZN8softUART10sendStringEPc>

	if (data[14] & 0x01)
 432:	80 91 da 00 	lds	r24, 0x00DA	; 0x8000da <__data_end+0xe>
 436:	80 ff       	sbrs	r24, 0
 438:	05 c0       	rjmp	.+10     	; 0x444 <__LOCK_REGION_LENGTH__+0x44>
		uart.sendString((char*)"Hz");
 43a:	66 ea       	ldi	r22, 0xA6	; 166
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	8c ed       	ldi	r24, 0xDC	; 220
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	1a d1       	rcall	.+564    	; 0x678 <_ZN8softUART10sendStringEPc>
	uart.sendChar(' ');
 444:	60 e2       	ldi	r22, 0x20	; 32
 446:	8c ed       	ldi	r24, 0xDC	; 220
 448:	90 e0       	ldi	r25, 0x00	; 0
 44a:	ed d0       	rcall	.+474    	; 0x626 <_ZN8softUART8sendCharEh>

	//DC OR AC
	if ((data[0] >> 4) & 0x01)
 44c:	80 91 cc 00 	lds	r24, 0x00CC	; 0x8000cc <__data_end>
 450:	84 ff       	sbrs	r24, 4
 452:	05 c0       	rjmp	.+10     	; 0x45e <__LOCK_REGION_LENGTH__+0x5e>
		uart.sendString((char*)"DC ");
 454:	69 ea       	ldi	r22, 0xA9	; 169
 456:	70 e0       	ldi	r23, 0x00	; 0
 458:	8c ed       	ldi	r24, 0xDC	; 220
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	0d d1       	rcall	.+538    	; 0x678 <_ZN8softUART10sendStringEPc>
	if (data[1] & 0x01)
 45e:	80 91 cd 00 	lds	r24, 0x00CD	; 0x8000cd <__data_end+0x1>
 462:	80 ff       	sbrs	r24, 0
 464:	05 c0       	rjmp	.+10     	; 0x470 <__LOCK_REGION_LENGTH__+0x70>
		uart.sendString((char*)"AC ");
 466:	6d ea       	ldi	r22, 0xAD	; 173
 468:	70 e0       	ldi	r23, 0x00	; 0
 46a:	8c ed       	ldi	r24, 0xDC	; 220
 46c:	90 e0       	ldi	r25, 0x00	; 0
 46e:	04 d1       	rcall	.+520    	; 0x678 <_ZN8softUART10sendStringEPc>

	//DECODE AUXILIARY DISPLAY
	uart.sendString((char*)"AUX: ");
 470:	61 eb       	ldi	r22, 0xB1	; 177
 472:	70 e0       	ldi	r23, 0x00	; 0
 474:	8c ed       	ldi	r24, 0xDC	; 220
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	ff d0       	rcall	.+510    	; 0x678 <_ZN8softUART10sendStringEPc>

	if ((data[8] >> 4) & 0x01)
 47a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end+0x8>
 47e:	84 ff       	sbrs	r24, 4
 480:	86 c0       	rjmp	.+268    	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>
		uart.sendChar('-');
 482:	6d e2       	ldi	r22, 0x2D	; 45
 484:	8c ed       	ldi	r24, 0xDC	; 220
 486:	90 e0       	ldi	r25, 0x00	; 0
 488:	ce d0       	rcall	.+412    	; 0x626 <_ZN8softUART8sendCharEh>
 48a:	81 c0       	rjmp	.+258    	; 0x58e <__LOCK_REGION_LENGTH__+0x18e>

	for (uint8_t i = 0; i < 4; i++)
	{
		uart.sendChar(48 + decodeDigit(data[9 + i]));
 48c:	f8 01       	movw	r30, r16
 48e:	81 91       	ld	r24, Z+
 490:	8f 01       	movw	r16, r30
 492:	c2 de       	rcall	.-636    	; 0x218 <_Z11decodeDigith>
 494:	60 e3       	ldi	r22, 0x30	; 48
 496:	68 0f       	add	r22, r24
 498:	8c ed       	ldi	r24, 0xDC	; 220
 49a:	90 e0       	ldi	r25, 0x00	; 0
 49c:	c4 d0       	rcall	.+392    	; 0x626 <_ZN8softUART8sendCharEh>
		if ((data[10 + i] & 0x01) & (i < 3))
 49e:	f8 01       	movw	r30, r16
 4a0:	80 81       	ld	r24, Z
 4a2:	80 ff       	sbrs	r24, 0
 4a4:	0a c0       	rjmp	.+20     	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
 4a6:	8d 2f       	mov	r24, r29
 4a8:	c3 30       	cpi	r28, 0x03	; 3
 4aa:	08 f0       	brcs	.+2      	; 0x4ae <__LOCK_REGION_LENGTH__+0xae>
 4ac:	8f 2d       	mov	r24, r15
 4ae:	88 23       	and	r24, r24
 4b0:	21 f0       	breq	.+8      	; 0x4ba <__LOCK_REGION_LENGTH__+0xba>
			uart.sendChar('.');
 4b2:	6e e2       	ldi	r22, 0x2E	; 46
 4b4:	8c ed       	ldi	r24, 0xDC	; 220
 4b6:	90 e0       	ldi	r25, 0x00	; 0
 4b8:	b6 d0       	rcall	.+364    	; 0x626 <_ZN8softUART8sendCharEh>
	uart.sendString((char*)"AUX: ");

	if ((data[8] >> 4) & 0x01)
		uart.sendChar('-');

	for (uint8_t i = 0; i < 4; i++)
 4ba:	cf 5f       	subi	r28, 0xFF	; 255
 4bc:	c4 30       	cpi	r28, 0x04	; 4
 4be:	31 f7       	brne	.-52     	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
		uart.sendChar(48 + decodeDigit(data[9 + i]));
		if ((data[10 + i] & 0x01) & (i < 3))
			uart.sendChar('.');
	}
	
	uart.sendChar(' ');
 4c0:	60 e2       	ldi	r22, 0x20	; 32
 4c2:	8c ed       	ldi	r24, 0xDC	; 220
 4c4:	90 e0       	ldi	r25, 0x00	; 0
 4c6:	af d0       	rcall	.+350    	; 0x626 <_ZN8softUART8sendCharEh>

	//DECODE UNIT PREFIX FOR AUXILIARY DISPLAY
	if ((data[8] >> 1) & 0x01)
 4c8:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end+0x8>
 4cc:	81 ff       	sbrs	r24, 1
 4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__LOCK_REGION_LENGTH__+0xd8>
		uart.sendChar('m');
 4d0:	6d e6       	ldi	r22, 0x6D	; 109
 4d2:	8c ed       	ldi	r24, 0xDC	; 220
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	a7 d0       	rcall	.+334    	; 0x626 <_ZN8softUART8sendCharEh>
	if (data[8] & 0x01)
 4d8:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end+0x8>
 4dc:	80 ff       	sbrs	r24, 0
 4de:	04 c0       	rjmp	.+8      	; 0x4e8 <__LOCK_REGION_LENGTH__+0xe8>
		uart.sendChar('u');
 4e0:	65 e7       	ldi	r22, 0x75	; 117
 4e2:	8c ed       	ldi	r24, 0xDC	; 220
 4e4:	90 e0       	ldi	r25, 0x00	; 0
 4e6:	9f d0       	rcall	.+318    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[13] >> 1) & 0x01)
 4e8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__data_end+0xd>
 4ec:	81 ff       	sbrs	r24, 1
 4ee:	04 c0       	rjmp	.+8      	; 0x4f8 <__LOCK_REGION_LENGTH__+0xf8>
		uart.sendChar('k');
 4f0:	6b e6       	ldi	r22, 0x6B	; 107
 4f2:	8c ed       	ldi	r24, 0xDC	; 220
 4f4:	90 e0       	ldi	r25, 0x00	; 0
 4f6:	97 d0       	rcall	.+302    	; 0x626 <_ZN8softUART8sendCharEh>
	if (data[13] & 0x01)
 4f8:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__data_end+0xd>
 4fc:	80 ff       	sbrs	r24, 0
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <__LOCK_REGION_LENGTH__+0x108>
		uart.sendChar('M');
 500:	6d e4       	ldi	r22, 0x4D	; 77
 502:	8c ed       	ldi	r24, 0xDC	; 220
 504:	90 e0       	ldi	r25, 0x00	; 0
 506:	8f d0       	rcall	.+286    	; 0x626 <_ZN8softUART8sendCharEh>

	//DECODE UNIT FOR AUXILIARY DISPLAY
	if ((data[13] >> 2) & 0x01)
 508:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__data_end+0xd>
 50c:	82 ff       	sbrs	r24, 2
 50e:	05 c0       	rjmp	.+10     	; 0x51a <__LOCK_REGION_LENGTH__+0x11a>
		uart.sendString((char*)"Hz");
 510:	66 ea       	ldi	r22, 0xA6	; 166
 512:	70 e0       	ldi	r23, 0x00	; 0
 514:	8c ed       	ldi	r24, 0xDC	; 220
 516:	90 e0       	ldi	r25, 0x00	; 0
 518:	af d0       	rcall	.+350    	; 0x678 <_ZN8softUART10sendStringEPc>
	if ((data[13] >> 3) & 0x01)
 51a:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__data_end+0xd>
 51e:	83 ff       	sbrs	r24, 3
 520:	04 c0       	rjmp	.+8      	; 0x52a <__LOCK_REGION_LENGTH__+0x12a>
		uart.sendChar('V');
 522:	66 e5       	ldi	r22, 0x56	; 86
 524:	8c ed       	ldi	r24, 0xDC	; 220
 526:	90 e0       	ldi	r25, 0x00	; 0
 528:	7e d0       	rcall	.+252    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[8] >> 2) & 0x01)
 52a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end+0x8>
 52e:	82 ff       	sbrs	r24, 2
 530:	04 c0       	rjmp	.+8      	; 0x53a <__LOCK_REGION_LENGTH__+0x13a>
		uart.sendChar('A');
 532:	61 e4       	ldi	r22, 0x41	; 65
 534:	8c ed       	ldi	r24, 0xDC	; 220
 536:	90 e0       	ldi	r25, 0x00	; 0
 538:	76 d0       	rcall	.+236    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[8] >> 3) & 0x01)
 53a:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end+0x8>
 53e:	83 ff       	sbrs	r24, 3
 540:	05 c0       	rjmp	.+10     	; 0x54c <__LOCK_REGION_LENGTH__+0x14c>
		uart.sendString((char*)"%4-20mA");
 542:	67 eb       	ldi	r22, 0xB7	; 183
 544:	70 e0       	ldi	r23, 0x00	; 0
 546:	8c ed       	ldi	r24, 0xDC	; 220
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	96 d0       	rcall	.+300    	; 0x678 <_ZN8softUART10sendStringEPc>
	uart.sendChar(' ');
 54c:	60 e2       	ldi	r22, 0x20	; 32
 54e:	8c ed       	ldi	r24, 0xDC	; 220
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	69 d0       	rcall	.+210    	; 0x626 <_ZN8softUART8sendCharEh>
	if ((data[13] >> 2) & 0x01)
 554:	80 91 d9 00 	lds	r24, 0x00D9	; 0x8000d9 <__data_end+0xd>
 558:	82 ff       	sbrs	r24, 2
 55a:	05 c0       	rjmp	.+10     	; 0x566 <__LOCK_REGION_LENGTH__+0x166>
		uart.sendString((char*)"AC");
 55c:	6f eb       	ldi	r22, 0xBF	; 191
 55e:	70 e0       	ldi	r23, 0x00	; 0
 560:	8c ed       	ldi	r24, 0xDC	; 220
 562:	90 e0       	ldi	r25, 0x00	; 0
 564:	89 d0       	rcall	.+274    	; 0x678 <_ZN8softUART10sendStringEPc>

	//FINISH
	uart.sendChar('\n');
 566:	6a e0       	ldi	r22, 0x0A	; 10
 568:	8c ed       	ldi	r24, 0xDC	; 220
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	5c d0       	rcall	.+184    	; 0x626 <_ZN8softUART8sendCharEh>

	if ((data[8] >> 7) & 0x01)
 56e:	80 91 d4 00 	lds	r24, 0x00D4	; 0x8000d4 <__data_end+0x8>
 572:	88 23       	and	r24, r24
 574:	94 f4       	brge	.+36     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
		uart.sendString((char*)"LOW BAT\n");
 576:	62 ec       	ldi	r22, 0xC2	; 194
 578:	70 e0       	ldi	r23, 0x00	; 0
 57a:	8c ed       	ldi	r24, 0xDC	; 220
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	7c d0       	rcall	.+248    	; 0x678 <_ZN8softUART10sendStringEPc>
 580:	0c c0       	rjmp	.+24     	; 0x59a <__LOCK_REGION_LENGTH__+0x19a>
 582:	0e ec       	ldi	r16, 0xCE	; 206
 584:	10 e0       	ldi	r17, 0x00	; 0

	return result;
}

void processData(void)
{
 586:	c0 e0       	ldi	r28, 0x00	; 0


	for (uint8_t i = 0; i < 6; i++)
	{
		uart.sendChar(48 + decodeDigit(data[2 + i]));
		if ((data[3 + i] & 0x01) & (i < 4))
 588:	d1 e0       	ldi	r29, 0x01	; 1
 58a:	f1 2c       	mov	r15, r1
 58c:	d1 ce       	rjmp	.-606    	; 0x330 <_Z11processDatav+0xca>
 58e:	05 ed       	ldi	r16, 0xD5	; 213
 590:	10 e0       	ldi	r17, 0x00	; 0

	return result;
}

void processData(void)
{
 592:	c0 e0       	ldi	r28, 0x00	; 0
		uart.sendChar('-');

	for (uint8_t i = 0; i < 4; i++)
	{
		uart.sendChar(48 + decodeDigit(data[9 + i]));
		if ((data[10 + i] & 0x01) & (i < 3))
 594:	d1 e0       	ldi	r29, 0x01	; 1
 596:	f1 2c       	mov	r15, r1
 598:	79 cf       	rjmp	.-270    	; 0x48c <__LOCK_REGION_LENGTH__+0x8c>
	//FINISH
	uart.sendChar('\n');

	if ((data[8] >> 7) & 0x01)
		uart.sendString((char*)"LOW BAT\n");
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	1f 91       	pop	r17
 5a0:	0f 91       	pop	r16
 5a2:	ff 90       	pop	r15
 5a4:	08 95       	ret

000005a6 <main>:
volatile int8_t mode = MODE_1X_PER_SEC;

int main(void)
{
    //setup IO - output for the IR  & activity LEDs
	DDRB |= (1 << DDB4) | (1 << DDB0);
 5a6:	87 b3       	in	r24, 0x17	; 23
 5a8:	81 61       	ori	r24, 0x11	; 17
 5aa:	87 bb       	out	0x17, r24	; 23
	IRLED_HIGH;
 5ac:	c4 9a       	sbi	0x18, 4	; 24
	//input for the phototransistor, just to be sure
	DDRB &=~(1 << DDB2);
 5ae:	ba 98       	cbi	0x17, 2	; 23
	
	uart.init();
 5b0:	8c ed       	ldi	r24, 0xDC	; 220
 5b2:	90 e0       	ldi	r25, 0x00	; 0
 5b4:	2d d0       	rcall	.+90     	; 0x610 <_ZN8softUART4initEv>
			LED_LOW;

			if (mode == MODE_1X_PER_SEC)
				_delay_ms(920);

			if ((mode == MODE_STOP) | (mode == MODE_SEND))
 5b6:	c1 e0       	ldi	r28, 0x01	; 1
 5b8:	d0 e0       	ldi	r29, 0x00	; 0
			{
				mode = MODE_STOP;
 5ba:	12 e0       	ldi	r17, 0x02	; 2
	
	uart.init();

    while (1)
	{
		LED_HIGH;
 5bc:	c0 9a       	sbi	0x18, 0	; 24
		if (getData() == 1)
 5be:	ec dd       	rcall	.-1064   	; 0x198 <_Z7getDatav>
 5c0:	81 30       	cpi	r24, 0x01	; 1
 5c2:	e1 f7       	brne	.-8      	; 0x5bc <main+0x16>
		{
			//succesfull transmission, send data via uart
			processData();
 5c4:	50 de       	rcall	.-864    	; 0x266 <_Z11processDatav>
			LED_LOW;
 5c6:	c0 98       	cbi	0x18, 0	; 24

			if (mode == MODE_1X_PER_SEC)
 5c8:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 5cc:	81 30       	cpi	r24, 0x01	; 1
 5ce:	49 f4       	brne	.+18     	; 0x5e2 <main+0x3c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d0:	2f ef       	ldi	r18, 0xFF	; 255
 5d2:	85 e7       	ldi	r24, 0x75	; 117
 5d4:	96 e1       	ldi	r25, 0x16	; 22
 5d6:	21 50       	subi	r18, 0x01	; 1
 5d8:	80 40       	sbci	r24, 0x00	; 0
 5da:	90 40       	sbci	r25, 0x00	; 0
 5dc:	e1 f7       	brne	.-8      	; 0x5d6 <main+0x30>
 5de:	00 c0       	rjmp	.+0      	; 0x5e0 <main+0x3a>
 5e0:	00 00       	nop
				_delay_ms(920);

			if ((mode == MODE_STOP) | (mode == MODE_SEND))
 5e2:	20 91 60 00 	lds	r18, 0x0060	; 0x800060 <__data_start>
 5e6:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__data_start>
 5ea:	8c 2f       	mov	r24, r28
 5ec:	93 30       	cpi	r25, 0x03	; 3
 5ee:	09 f0       	breq	.+2      	; 0x5f2 <main+0x4c>
 5f0:	8d 2f       	mov	r24, r29
 5f2:	81 11       	cpse	r24, r1
 5f4:	06 c0       	rjmp	.+12     	; 0x602 <main+0x5c>
 5f6:	8c 2f       	mov	r24, r28
 5f8:	22 30       	cpi	r18, 0x02	; 2
 5fa:	09 f0       	breq	.+2      	; 0x5fe <main+0x58>
 5fc:	8d 2f       	mov	r24, r29
 5fe:	88 23       	and	r24, r24
 600:	e9 f2       	breq	.-70     	; 0x5bc <main+0x16>
			{
				mode = MODE_STOP;
 602:	10 93 60 00 	sts	0x0060, r17	; 0x800060 <__data_start>
				while (mode == MODE_STOP);
 606:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__data_start>
 60a:	82 30       	cpi	r24, 0x02	; 2
 60c:	e1 f3       	breq	.-8      	; 0x606 <main+0x60>
 60e:	d6 cf       	rjmp	.-84     	; 0x5bc <main+0x16>

00000610 <_ZN8softUART4initEv>:
extern volatile uint8_t mode;

void softUART::init()
{
	//setup TX pin
	DDRB |= (1 << DDB1);
 610:	b9 9a       	sbi	0x17, 1	; 23
	STX_HIGH;
 612:	c1 9a       	sbi	0x18, 1	; 24

	//setup RX pin - PB2 as input
	DDRB &=~(1 << DDB2);
 614:	ba 98       	cbi	0x17, 2	; 23
	MCUCR |= (1 << ISC01);		//INT on falling edge
 616:	85 b7       	in	r24, 0x35	; 53
 618:	82 60       	ori	r24, 0x02	; 2
 61a:	85 bf       	out	0x35, r24	; 53
	GIMSK |= (1 << INT0);		//enable INT0
 61c:	8b b7       	in	r24, 0x3b	; 59
 61e:	80 64       	ori	r24, 0x40	; 64
 620:	8b bf       	out	0x3b, r24	; 59
	sei();
 622:	78 94       	sei
 624:	08 95       	ret

00000626 <_ZN8softUART8sendCharEh>:
}

void softUART::sendChar(uint8_t ch)
{
	STX_LOW;
 626:	c1 98       	cbi	0x18, 1	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 628:	8f ec       	ldi	r24, 0xCF	; 207
 62a:	90 e0       	ldi	r25, 0x00	; 0
 62c:	01 97       	sbiw	r24, 0x01	; 1
 62e:	f1 f7       	brne	.-4      	; 0x62c <_ZN8softUART8sendCharEh+0x6>
 630:	00 c0       	rjmp	.+0      	; 0x632 <_ZN8softUART8sendCharEh+0xc>
 632:	00 00       	nop
	_delay_us(SUART_DELAY);
	STX_HIGH;
 634:	c1 9a       	sbi	0x18, 1	; 24
 636:	80 e0       	ldi	r24, 0x00	; 0
 638:	90 e0       	ldi	r25, 0x00	; 0

	for (uint8_t i = 0; i < 8; i++)
	{
		if ((ch >> i) & 0x01)
 63a:	70 e0       	ldi	r23, 0x00	; 0
 63c:	9b 01       	movw	r18, r22
 63e:	08 2e       	mov	r0, r24
 640:	02 c0       	rjmp	.+4      	; 0x646 <_ZN8softUART8sendCharEh+0x20>
 642:	35 95       	asr	r19
 644:	27 95       	ror	r18
 646:	0a 94       	dec	r0
 648:	e2 f7       	brpl	.-8      	; 0x642 <_ZN8softUART8sendCharEh+0x1c>
 64a:	20 ff       	sbrs	r18, 0
 64c:	02 c0       	rjmp	.+4      	; 0x652 <_ZN8softUART8sendCharEh+0x2c>
		STX_HIGH;
 64e:	c1 9a       	sbi	0x18, 1	; 24
 650:	01 c0       	rjmp	.+2      	; 0x654 <_ZN8softUART8sendCharEh+0x2e>
		else
		STX_LOW;
 652:	c1 98       	cbi	0x18, 1	; 24
 654:	ef ec       	ldi	r30, 0xCF	; 207
 656:	f0 e0       	ldi	r31, 0x00	; 0
 658:	31 97       	sbiw	r30, 0x01	; 1
 65a:	f1 f7       	brne	.-4      	; 0x658 <_ZN8softUART8sendCharEh+0x32>
 65c:	00 c0       	rjmp	.+0      	; 0x65e <_ZN8softUART8sendCharEh+0x38>
 65e:	00 00       	nop
 660:	01 96       	adiw	r24, 0x01	; 1
{
	STX_LOW;
	_delay_us(SUART_DELAY);
	STX_HIGH;

	for (uint8_t i = 0; i < 8; i++)
 662:	88 30       	cpi	r24, 0x08	; 8
 664:	91 05       	cpc	r25, r1
 666:	51 f7       	brne	.-44     	; 0x63c <_ZN8softUART8sendCharEh+0x16>
		else
		STX_LOW;
		_delay_us(SUART_DELAY);
	}

	STX_HIGH;
 668:	c1 9a       	sbi	0x18, 1	; 24
 66a:	8f ec       	ldi	r24, 0xCF	; 207
 66c:	90 e0       	ldi	r25, 0x00	; 0
 66e:	01 97       	sbiw	r24, 0x01	; 1
 670:	f1 f7       	brne	.-4      	; 0x66e <_ZN8softUART8sendCharEh+0x48>
 672:	00 c0       	rjmp	.+0      	; 0x674 <_ZN8softUART8sendCharEh+0x4e>
 674:	00 00       	nop
 676:	08 95       	ret

00000678 <_ZN8softUART10sendStringEPc>:
	_delay_us(SUART_DELAY);
}

void softUART::sendString(char* s)
{
 678:	0f 93       	push	r16
 67a:	1f 93       	push	r17
 67c:	cf 93       	push	r28
 67e:	df 93       	push	r29
 680:	eb 01       	movw	r28, r22
	while(*s)  sendChar(*s++);
 682:	68 81       	ld	r22, Y
 684:	66 23       	and	r22, r22
 686:	39 f0       	breq	.+14     	; 0x696 <_ZN8softUART10sendStringEPc+0x1e>
 688:	8c 01       	movw	r16, r24
 68a:	21 96       	adiw	r28, 0x01	; 1
 68c:	c8 01       	movw	r24, r16
 68e:	cb df       	rcall	.-106    	; 0x626 <_ZN8softUART8sendCharEh>
 690:	69 91       	ld	r22, Y+
 692:	61 11       	cpse	r22, r1
 694:	fb cf       	rjmp	.-10     	; 0x68c <_ZN8softUART10sendStringEPc+0x14>
}
 696:	df 91       	pop	r29
 698:	cf 91       	pop	r28
 69a:	1f 91       	pop	r17
 69c:	0f 91       	pop	r16
 69e:	08 95       	ret

000006a0 <__vector_1>:

ISR (INT0_vect)
{
 6a0:	1f 92       	push	r1
 6a2:	0f 92       	push	r0
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	0f 92       	push	r0
 6a8:	11 24       	eor	r1, r1
 6aa:	2f 93       	push	r18
 6ac:	4f 93       	push	r20
 6ae:	5f 93       	push	r21
 6b0:	6f 93       	push	r22
 6b2:	7f 93       	push	r23
 6b4:	8f 93       	push	r24
 6b6:	9f 93       	push	r25
 6b8:	ef 93       	push	r30
 6ba:	ff 93       	push	r31
 6bc:	87 e3       	ldi	r24, 0x37	; 55
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	01 97       	sbiw	r24, 0x01	; 1
 6c2:	f1 f7       	brne	.-4      	; 0x6c0 <__vector_1+0x20>
 6c4:	00 c0       	rjmp	.+0      	; 0x6c6 <__vector_1+0x26>
 6c6:	00 00       	nop
 6c8:	80 e0       	ldi	r24, 0x00	; 0
 6ca:	90 e0       	ldi	r25, 0x00	; 0
	uint8_t data = 0x0;
 6cc:	20 e0       	ldi	r18, 0x00	; 0
	_delay_us(SUART_DELAY + (SUART_DELAY / 2));

	for (uint8_t i = 0; i < 8; i ++)
	{
		if (!SRX_LOW)
			data |= (1 << i);
 6ce:	61 e0       	ldi	r22, 0x01	; 1
 6d0:	70 e0       	ldi	r23, 0x00	; 0
	
	_delay_us(SUART_DELAY + (SUART_DELAY / 2));

	for (uint8_t i = 0; i < 8; i ++)
	{
		if (!SRX_LOW)
 6d2:	b2 9b       	sbis	0x16, 2	; 22
 6d4:	08 c0       	rjmp	.+16     	; 0x6e6 <__vector_1+0x46>
			data |= (1 << i);
 6d6:	ab 01       	movw	r20, r22
 6d8:	08 2e       	mov	r0, r24
 6da:	02 c0       	rjmp	.+4      	; 0x6e0 <__vector_1+0x40>
 6dc:	44 0f       	add	r20, r20
 6de:	55 1f       	adc	r21, r21
 6e0:	0a 94       	dec	r0
 6e2:	e2 f7       	brpl	.-8      	; 0x6dc <__vector_1+0x3c>
 6e4:	24 2b       	or	r18, r20
 6e6:	ef ec       	ldi	r30, 0xCF	; 207
 6e8:	f0 e0       	ldi	r31, 0x00	; 0
 6ea:	31 97       	sbiw	r30, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <__vector_1+0x4a>
 6ee:	00 c0       	rjmp	.+0      	; 0x6f0 <__vector_1+0x50>
 6f0:	00 00       	nop
 6f2:	01 96       	adiw	r24, 0x01	; 1
{
	uint8_t data = 0x0;
	
	_delay_us(SUART_DELAY + (SUART_DELAY / 2));

	for (uint8_t i = 0; i < 8; i ++)
 6f4:	88 30       	cpi	r24, 0x08	; 8
 6f6:	91 05       	cpc	r25, r1
 6f8:	61 f7       	brne	.-40     	; 0x6d2 <__vector_1+0x32>
		if (!SRX_LOW)
			data |= (1 << i);
		_delay_us(SUART_DELAY);
	}

	switch (data)
 6fa:	22 3c       	cpi	r18, 0xC2	; 194
 6fc:	61 f0       	breq	.+24     	; 0x716 <__vector_1+0x76>
 6fe:	18 f4       	brcc	.+6      	; 0x706 <__vector_1+0x66>
 700:	21 3c       	cpi	r18, 0xC1	; 193
 702:	31 f0       	breq	.+12     	; 0x710 <__vector_1+0x70>
 704:	13 c0       	rjmp	.+38     	; 0x72c <__vector_1+0x8c>
 706:	23 3c       	cpi	r18, 0xC3	; 195
 708:	51 f0       	breq	.+20     	; 0x71e <__vector_1+0x7e>
 70a:	24 3c       	cpi	r18, 0xC4	; 196
 70c:	61 f0       	breq	.+24     	; 0x726 <__vector_1+0x86>
 70e:	0e c0       	rjmp	.+28     	; 0x72c <__vector_1+0x8c>
	{
		case 0xC1: mode = MODE_5X_PER_SEC; break;
 710:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__data_start>
 714:	0b c0       	rjmp	.+22     	; 0x72c <__vector_1+0x8c>
		case 0xC2: mode = MODE_1X_PER_SEC; break;
 716:	81 e0       	ldi	r24, 0x01	; 1
 718:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 71c:	07 c0       	rjmp	.+14     	; 0x72c <__vector_1+0x8c>
		case 0xC3: mode = MODE_STOP; break;
 71e:	82 e0       	ldi	r24, 0x02	; 2
 720:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
 724:	03 c0       	rjmp	.+6      	; 0x72c <__vector_1+0x8c>
		case 0xC4: mode = MODE_SEND; break;
 726:	83 e0       	ldi	r24, 0x03	; 3
 728:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
		default: break;
	}

	//clear interrupt flag
	GIFR |= (1 << INTF0);
 72c:	8a b7       	in	r24, 0x3a	; 58
 72e:	80 64       	ori	r24, 0x40	; 64
 730:	8a bf       	out	0x3a, r24	; 58
}
 732:	ff 91       	pop	r31
 734:	ef 91       	pop	r30
 736:	9f 91       	pop	r25
 738:	8f 91       	pop	r24
 73a:	7f 91       	pop	r23
 73c:	6f 91       	pop	r22
 73e:	5f 91       	pop	r21
 740:	4f 91       	pop	r20
 742:	2f 91       	pop	r18
 744:	0f 90       	pop	r0
 746:	0f be       	out	0x3f, r0	; 63
 748:	0f 90       	pop	r0
 74a:	1f 90       	pop	r1
 74c:	18 95       	reti

0000074e <_exit>:
 74e:	f8 94       	cli

00000750 <__stop_program>:
 750:	ff cf       	rjmp	.-2      	; 0x750 <__stop_program>
